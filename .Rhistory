###Data Visualisation###
########################
# libraries required
library(ggplot2)
library(GGally)
require(foreign)
require(MASS)
require(Hmisc)
require(reshape2)
# Start plotting
ggpairs(Pok_Grouped)
boxplot(PhyscialActivity~education,
data=Pok_Grouped,
main="Different boxplots for gender",
xlab="Month Number",
ylab="Amount of Physical Activity"
)
boxplot(PhyscialActivity~Gender,
data=Pok_Grouped,
main="Different boxplots for Education Level",
xlab="Education Level",
ylab="Amount of Physical Activity"
)
dev.off()
par(mfrow = c(3, 1))
ggplot(Pok_Grouped, aes(x = social_sharing, y = PhyscialActivity)) +
geom_point() +
labs(x = "Social Sharing", y = "Amount of Physcial Activity") +
geom_smooth(method = "lm", se = F)
ggplot(Pok_Grouped, aes(x = PokemonGo_AppUsage, y = PhyscialActivity)) +
geom_point() +
labs(x = "PokemonGo_AppUsage", y = "Amount of Physcial Activity") +
geom_smooth(method = "lm", se = F)
ggplot(Pok_Grouped, aes(x = social_sharing, y = PokemonGo_AppUsage)) +
geom_point() +
labs(x = "Social Sharing", y = "PokemonGo_AppUsage") +
geom_smooth(method = "lm", se = F)
dev.off()
# import library required
library(dplyr)
library(psych)
library(olsrr)
# loading dataset
load("pokemon.Rdata")
# observe data
head(pok,3)
# primary observe of data
summary(pok)
# checking number of missing value
sum(is.na(pok))
# checking unreasonable items in age
pok_age_s0 <- pok[pok$age <0,]
pok_age_s0
# However, according to the article, the records where the answer of
# ATTENTION_filter1 is not "Disagree" should be filtered
pok_new <- pok[pok$ATTENTION_filter1=="Disagree",]
pok_new$ATTENTION_filter1 <- NULL
summary(pok_new)
###convert variables into numeric values###
pok_new[,4:30] <- pok_new[,4:30] %>% mutate_if(is.factor,as.numeric)
summary(pok_new)
# Calculate Cronbach's Alpha
# Attitude
alpha(pok_new[7:12], check.keys=TRUE)
# steps Attitude
alpha(pok_new[13:18], check.keys=TRUE)
# Behaviour
alpha(pok_new[19:24], check.keys=TRUE)
# Pokemon Behviour
alpha(pok_new[27:29], check.keys=TRUE)
## variable selection
# library required
library(olsrr)
# import library required
library(dplyr)
library(psych)
# loading dataset
load("pokemon.Rdata")
# observe data
head(pok,3)
# primary observe of data
summary(pok)
# checking number of missing value
sum(is.na(pok))
# checking unreasonable items in age
pok_age_s0 <- pok[pok$age <0,]
pok_age_s0
# However, according to the article, the records where the answer of
# ATTENTION_filter1 is not "Disagree" should be filtered
pok_new <- pok[pok$ATTENTION_filter1=="Disagree",]
pok_new$ATTENTION_filter1 <- NULL
summary(pok_new)
###convert variables into numeric values###
pok_new[,4:30] <- pok_new[,4:30] %>% mutate_if(is.factor,as.numeric)
summary(pok_new)
# Calculate Cronbach's Alpha
# Attitude
alpha(pok_new[7:12], check.keys=TRUE)
# steps Attitude
alpha(pok_new[13:18], check.keys=TRUE)
# import library required
library(dplyr)
library(psych)
library(olsrr)
# loading dataset
load("pokemon.Rdata")
# observe data
head(pok,3)
# primary observe of data
summary(pok)
# checking number of missing value
sum(is.na(pok))
# checking unreasonable items in age
pok_age_s0 <- pok[pok$age <0,]
pok_age_s0
# However, according to the article, the records where the answer of
# ATTENTION_filter1 is not "Disagree" should be filtered
pok_new <- pok[pok$ATTENTION_filter1=="Disagree",]
pok_new$ATTENTION_filter1 <- NULL
summary(pok_new)
###convert variables into numeric values###
pok_new[,4:30] <- pok_new[,4:30] %>% mutate_if(is.factor,as.numeric)
summary(pok_new)
# Calculate Cronbach's Alpha
# Attitude
alpha(pok_new[7:12], check.keys=TRUE)
# steps Attitude
alpha(pok_new[13:18], check.keys=TRUE)
# Behaviour
alpha(pok_new[19:24], check.keys=TRUE)
# Pokemon Behviour
alpha(pok_new[27:29], check.keys=TRUE)
# variable grouping
Attitude <- rowMeans(pok_new[7:12])
StepAttitude <- rowMeans(pok_new[13:18])
Behaviour <- rowMeans(pok_new[19:24])
PokemonBehaviour <- rowMeans(pok_new[27:29])
# create new dataset
Pok_Grouped <- pok_new[c(4:6)]
Pok_Grouped$Attitude <- Attitude
Pok_Grouped$StepsAttitude <- StepAttitude
Pok_Grouped$PhyscialActivity <- Behaviour
Pok_Grouped$PokemonGo_AppUsage <- pok_new$app_usage_PokemonGoApp_pokemonusage1
Pok_Grouped$social_sharing <- pok_new$social_sharing
Pok_Grouped$PokemonRelate_Behaviour <- PokemonBehaviour
head(Pok_Grouped)
summary(Pok_Grouped)
# libraries required
library(ggplot2)
library(GGally)
require(foreign)
require(MASS)
require(Hmisc)
require(reshape2)
# Start plotting
ggpairs(Pok_Grouped)
boxplot(PhyscialActivity~education,
data=Pok_Grouped,
main="Different boxplots for gender",
xlab="Month Number",
ylab="Amount of Physical Activity"
)
boxplot(PhyscialActivity~Gender,
data=Pok_Grouped,
main="Different boxplots for Education Level",
xlab="Education Level",
ylab="Amount of Physical Activity"
)
dev.off()
par(mfrow = c(3, 1))
ggplot(Pok_Grouped, aes(x = social_sharing, y = PhyscialActivity)) +
geom_point() +
labs(x = "Social Sharing", y = "Amount of Physcial Activity") +
geom_smooth(method = "lm", se = F)
ggplot(Pok_Grouped, aes(x = PokemonGo_AppUsage, y = PhyscialActivity)) +
geom_point() +
labs(x = "PokemonGo_AppUsage", y = "Amount of Physcial Activity") +
geom_smooth(method = "lm", se = F)
ggplot(Pok_Grouped, aes(x = social_sharing, y = PokemonGo_AppUsage)) +
geom_point() +
labs(x = "Social Sharing", y = "PokemonGo_AppUsage") +
geom_smooth(method = "lm", se = F)
dev.off()
# full model construction
Pok.model <- lm(PhyscialActivity ~ ., data = Pok_Grouped)
summary(Pok.model)
car::vif(Pok.model)
#assumption checking
par(mfrow = c(2, 2))
plot(Pok.model)
dev.off()
par(mfrow = c(2, 2))
ggplot(Pok_Grouped, aes(x = social_sharing, y = PhyscialActivity)) +
geom_point() +
labs(x = "Social Sharing", y = "Amount of Physcial Activity") +
geom_smooth(method = "lm", se = F)
ggplot(Pok_Grouped, aes(x = PokemonGo_AppUsage, y = PhyscialActivity)) +
geom_point() +
labs(x = "PokemonGo_AppUsage", y = "Amount of Physcial Activity") +
geom_smooth(method = "lm", se = F)
ggplot(Pok_Grouped, aes(x = social_sharing, y = PokemonGo_AppUsage)) +
geom_point() +
labs(x = "Social Sharing", y = "PokemonGo_AppUsage") +
geom_smooth(method = "lm", se = F)
dev.off()
dev.off()
dev.off()
# full model construction
Pok.model <- lm(PhyscialActivity ~ ., data = Pok_Grouped)
summary(Pok.model)
car::vif(Pok.model)
#assumption checking
par(mfrow = c(2, 2))
plot(Pok.model)
# full model construction
Pok.Linear <- lm(PhyscialActivity ~ ., data = Pok_Grouped)
summary(Pok.Linear)
car::vif(Pok.Linear)
vif(Pok.Linear)
library(car)
vif(Pok.Linear)
#assumption checking
par(mfrow = c(2, 2))
plot(Pok.model)
dev.off()
## variable selection
# library required
library(olsrr)
# use multiple for discovering best model
final_ols <- ols_step_best_subset(Pok.model)
final_ols
final.model <- stepAIC(Pok.model)
# model observation
summary(final.model)
# assumption checking
par(mfrow = c(2, 2))
plot(final.model )
#assumption checking
par(mfrow = c(2, 2))
dev.off()
Pok.Gamma <- glm(PhyscialActivity ~ ., family = Gamma,
data=Pok_Grouped)
summary(Pok.Gamma)
par(mfrow = c(2, 2))
plot(Pok.Gamma)
final_ols <- ols_step_best_subset(full_model.Gamma)
final_ols
final.model <- stepAIC(full_model.Gamma)
summary(final.model)
summary(Pok.Gamma)
par(mfrow = c(2, 2))
plot(Pok.Gamma)
final_ols <- ols_step_best_subset(full_model.Gamma)
final_ols <- ols_step_best_subset(Pok.Gamma)
Seleced_Pok.Gamma <- stepAIC(Pok.Gamma)
summary(Seleced_Pok.Gamma)
par(mfrow = c(2, 2))
plot(Seleced_Pok.Gamma)
summary(Seleced_Pok.Gamma)
# model observation
summary(Selected_Pok.Linear)
## variable selection
# library required
library(olsrr)
# use multiple for discovering best model
final_ols <- ols_step_best_subset(Pok.Linear)
final_ols
Selected_Pok.Linear <- stepAIC(Pok.Linear)
# model observation
summary(Selected_Pok.Linear)
# assumption checking
par(mfrow = c(2, 2))
final_ols
summary(Seleced_Pok.Gamma)
# full model construction
Pok.Linear <- glm(PhyscialActivity ~ ., data = Pok_Grouped)
summary(Pok.Linear)
vif(Pok.Linear)
#assumption checking
par(mfrow = c(2, 2))
plot(Pok.Linear)
dev.off()
## variable selection
# library required
library(olsrr)
# use multiple for discovering best model
final_ols <- ols_step_best_subset(Pok.Linear)
final_ols
Selected_Pok.Linear <- stepAIC(Pok.Linear)
# model observation
summary(Selected_Pok.Linear)
# import library required
library(dplyr)
library(psych)
####################################
###Data Observation and Cleansing###
####################################
# loading dataset
load("pokemon.Rdata")
# observe data
head(pok,3)
# primary observe of data
summary(pok)
# checking number of missing value
sum(is.na(pok))
# checking unreasonable items in age
pok_age_s0 <- pok[pok$age <0,]
pok_age_s0
#@ This dataset is really good, without error or missing value
# However, according to the article, the records where the answer of
# ATTENTION_filter1 is not "Disagree" should be filtered
pok_new <- pok[pok$ATTENTION_filter1=="Disagree",]
pok_new$ATTENTION_filter1 <- NULL
summary(pok_new)
#################################
###Preparation of Grouped data###
#################################
###convert variables into numeric values###
pok_new[,4:30] <- pok_new[,4:30] %>% mutate_if(is.factor,as.numeric)
summary(pok_new)
###Justify the grouping###
# Calculate Cronbach's Alpha
# Attitude
alpha(pok_new[7:12], check.keys=TRUE)
# steps Attitude
alpha(pok_new[13:18], check.keys=TRUE)
# Behaviour
alpha(pok_new[19:24], check.keys=TRUE)
# Pokemon Behviour
alpha(pok_new[27:29], check.keys=TRUE)
#@ Since alpha of behaviour and Pokemon behaviour are "Acceptable"
#@ we group them together
# variable grouping
Attitude <- rowSums(pok_new[7:12])
StepAttitude <- rowSums(pok_new[13:18])
Behaviour <- rowSums(pok_new[19:24])
PokemonBehaviour <- rowSums(pok_new[27:29])
# create new dataset
Pok_Grouped <- pok_new[c(4:6)]
Pok_Grouped$Attitude <- Attitude
Pok_Grouped$StepsAttitude <- StepAttitude
Pok_Grouped$PhyscialActivity <- Behaviour
Pok_Grouped$PokemonGo_AppUsage <- pok_new$app_usage_PokemonGoApp_pokemonusage1
Pok_Grouped$social_sharing <- pok_new$social_sharing
Pok_Grouped$PokemonRelate_Behaviour <- PokemonBehaviour
head(Pok_Grouped)
summary(Pok_Grouped)
########################
###Data Visualisation###
########################
# libraries required
library(ggplot2)
library(GGally)
require(foreign)
require(MASS)
require(Hmisc)
require(reshape2)
# Start plotting
ggpairs(Pok_Grouped)
boxplot(PhyscialActivity~education,
data=Pok_Grouped,
main="Different boxplots for gender",
xlab="Month Number",
ylab="Amount of Physical Activity"
)
boxplot(PhyscialActivity~Gender,
data=Pok_Grouped,
main="Different boxplots for Education Level",
xlab="Education Level",
ylab="Amount of Physical Activity"
)
dev.off()
########################
###Model Constructing###
########################
# full model construction
Pok.Linear <- glm(PhyscialActivity ~ ., data = Pok_Grouped)
summary(Pok.Linear)
vif(Pok.Linear)
#assumption checking
par(mfrow = c(2, 2))
plot(Pok.Linear)
dev.off()
## variable selection
# library required
library(olsrr)
# use multiple for discovering best model
final_ols <- ols_step_best_subset(Pok.Linear)
final_ols
Selected_Pok.Linear <- stepAIC(Pok.Linear)
# model observation
summary(Selected_Pok.Linear)
# assumption checking
par(mfrow = c(2, 2))
plot(Selected_Pok.Linear)
dev.off()
Pok.Poisson <- glm(PhyscialActivity ~ ., family="poisson",
data=Pok_Grouped)
Pok.Poisson <- glm(PhyscialActivity ~ ., family="poisson",
data=Pok_Grouped)
summary(Pok.Poisson)
par(mfrow = c(2, 2))
plot(Pok.Poisson)
final_ols <- ols_step_best_subset(Pok.Poisson)
final_ols
Pok.Poisson_final <- stepAIC(Pok.Poisson)
summary(Pok.Poisson_final)
par(mfrow = c(2, 2))
plot(Pok.Poisson_final)
summary(Pok.Poisson_final)
###In here, we group variables by row sum
# import library required
library(dplyr)
library(psych)
####################################
###Data Observation and Cleansing###
####################################
# loading dataset
load("pokemon.Rdata")
# observe data
head(pok,3)
# primary observe of data
summary(pok)
# checking number of missing value
sum(is.na(pok))
# checking unreasonable items in age
pok_age_s0 <- pok[pok$age <0,]
pok_age_s0
#@ This dataset is really good, without error or missing value
# However, according to the article, the records where the answer of
# ATTENTION_filter1 is not "Disagree" should be filtered
pok_new <- pok[pok$ATTENTION_filter1=="Disagree",]
pok_new$ATTENTION_filter1 <- NULL
summary(pok_new)
#################################
###Preparation of Grouped data###
#################################
###convert variables into numeric values###
pok_new[,4:30] <- pok_new[,4:30] %>% mutate_if(is.factor,as.numeric)
summary(pok_new)
###Justify the grouping###
# Calculate Cronbach's Alpha
# Attitude
alpha(pok_new[7:12], check.keys=TRUE)
# steps Attitude
alpha(pok_new[13:18], check.keys=TRUE)
# Behaviour
alpha(pok_new[19:24], check.keys=TRUE)
# Pokemon Behviour
alpha(pok_new[27:29], check.keys=TRUE)
#@ Since alpha of behaviour and Pokemon behaviour are "Acceptable"
#@ we group them together
# variable grouping
Attitude <- rowSums(pok_new[7:12])
StepAttitude <- rowSums(pok_new[13:18])
Behaviour <- rowSums(pok_new[19:24])
PokemonBehaviour <- rowSums(pok_new[27:29])
# create new dataset
Pok_Grouped <- pok_new[c(4:6)]
Pok_Grouped$Attitude <- Attitude
Pok_Grouped$StepsAttitude <- StepAttitude
Pok_Grouped$PhyscialActivity <- Behaviour
Pok_Grouped$PokemonGo_AppUsage <- pok_new$app_usage_PokemonGoApp_pokemonusage1
Pok_Grouped$social_sharing <- pok_new$social_sharing
Pok_Grouped$PokemonRelate_Behaviour <- PokemonBehaviour
head(Pok_Grouped)
summary(Pok_Grouped)
########################
###Data Visualisation###
########################
# libraries required
library(ggplot2)
library(GGally)
require(foreign)
require(MASS)
require(Hmisc)
require(reshape2)
# Start plotting
ggpairs(Pok_Grouped)
boxplot(PhyscialActivity~education,
data=Pok_Grouped,
main="Different boxplots for gender",
xlab="Month Number",
ylab="Amount of Physical Activity"
)
boxplot(PhyscialActivity~Gender,
data=Pok_Grouped,
main="Different boxplots for Education Level",
xlab="Education Level",
ylab="Amount of Physical Activity"
)
dev.off()
# full model construction
Pok.Linear <- glm(PhyscialActivity ~ ., data = Pok_Grouped)
summary(Pok.Linear)
vif(Pok.Linear)
#assumption checking
par(mfrow = c(2, 2))
plot(Pok.Linear)
dev.off()
## variable selection
# library required
library(olsrr)
# use multiple for discovering best model
final_ols <- ols_step_best_subset(Pok.Linear)
final_ols
Selected_Pok.Linear <- stepAIC(Pok.Linear)
# model observation
summary(Selected_Pok.Linear)
Pok.Gamma <- glm(PhyscialActivity ~ ., family = Gamma(link=log),
data=Pok_Grouped)
summary(Pok.Gamma)
