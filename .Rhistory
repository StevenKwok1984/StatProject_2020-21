library(dplyr)
library(psych)
library(olsrr)
library(car)
library(ggplot2)
library(GGally)
require(foreign)
require(MASS)
require(Hmisc)
require(reshape2)
# assumption checking
par(mfrow = c(2, 2))
plot(Selected_Pok.Linear)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(psych)
load("pokemon.Rdata")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(psych)
load("pokemon.Rdata")
# loading dataset
load("pokemon.Rdata")
# create new dataset
Pok_Grouped <- pok_new[c(4:6)]
Pok_Grouped$Attitude <- Attitude
Pok_Grouped$PhyscialActivity <- Behaviour
Pok_Grouped$PokemonGo_AppUsage <- pok_new$app_usage_PokemonGoApp_pokemonusage1
Pok_Grouped$social_sharing <- pok_new$social_sharing
Pok_Grouped$PokemonGo_Relate.Behaviour <- PokemonBehaviour
summary(Pok_Grouped)
# full model construction
Pok.Linear <- glm(PhyscialActivity ~ .^2, data = Pok_Grouped)
## variable selection
# use multiple for discovering best model
Selected_Pok.Linear <- stepAIC(Pok.Linear)
# model observation
summary(Selected_Pok.Linear)
# assumption checking
par(mfrow = c(2, 2))
plot(Selected_Pok.Linear)
# full model construction
Pok.Linear <- glm(PhyscialActivity ~ .^2, data = Pok_Grouped)
## variable selection
# use multiple for discovering best model
Selected_Pok.Linear <- stepAIC(Pok.Linear)
# model observation
summary(Selected_Pok.Linear)
# assumption checking
par(mfrow = c(2, 2))
plot(Selected_Pok.Linear)
knitr::opts_chunk$set(echo = FALSE)
Pok.Gamma <- glm(PhyscialActivity ~ ., family = Gamma(link="identity"),
data=Pok_Grouped)
## variable selection
# use AIC for discovering best model
Seleced_Pok.Gamma <- stepAIC(Pok.Gamma)
library(dplyr)
library(psych)
library(ggplot2)
library(GGally)
require(foreign)
require(MASS)
require(Hmisc)
require(reshape2)
Pok.Gamma <- glm(PhyscialActivity ~ ., family = Gamma(link="identity"),
data=Pok_Grouped)
## variable selection
# use AIC for discovering best model
Seleced_Pok.Gamma <- stepAIC(Pok.Gamma)
# model observation
summary(Seleced_Pok.Gamma)
Pok.Gamma <- glm(PhyscialActivity ~ .^2, family = Gamma(link="identity"),
data=Pok_Grouped)
## variable selection
# use AIC for discovering best model
Seleced_Pok.Gamma <- stepAIC(Pok.Gamma)
# model observation
summary(Seleced_Pok.Gamma)
ggpairs(Pok.Grouped_New)
ggpairs(Pok.Grouped)
# import library required
library(dplyr)
library(psych)
library(olsrr)
library(car)
####################################
###Data Observation and Cleansing###
####################################
# loading dataset
load("pokemon.Rdata")
# observe data
head(pok,3)
# primary observe of data
summary(pok)
# checking number of missing value
sum(is.na(pok))
# checking unreasonable items in age
pok_age_s0 <- pok[pok$age <0,]
pok_age_s0
#@ This dataset is really good, without error or missing value
# However, according to the article, the records where the answer of
# ATTENTION_filter1 is not "Disagree" should be filtered
pok_new <- pok[pok$ATTENTION_filter1=="Disagree",]
pok_new$ATTENTION_filter1 <- NULL
summary(pok_new)
#################################
###Preparation of Grouped data###
#################################
###convert variables into numeric values###
pok_new[,4:30] <- pok_new[,4:30] %>% mutate_if(is.factor,as.numeric)
summary(pok_new)
###Justify the grouping###
# Calculate Cronbach's Alpha
## Attitude & StepsAttitude
alpha(pok_new[7:18], check.keys=TRUE)
# Physical Behaviour
alpha(pok_new[19:24], check.keys=TRUE)
# Pokemon Behviour
alpha(pok_new[27:29], check.keys=TRUE)
#@ Since alpha of behaviour and Pokemon behaviour are "Acceptable"
#@ we group them together
# variable grouping
Attitude <- rowMeans(pok_new[7:18])
Behaviour <- rowMeans(pok_new[19:24])
PokemonBehaviour <- rowMeans(pok_new[27:29])
# create new dataset
Pok_Grouped <- pok_new[c(4:6)]
Pok_Grouped$Attitude <- Attitude
Pok_Grouped$PhyscialActivity <- Behaviour
Pok_Grouped$PokemonGo_AppUsage <- pok_new$app_usage_PokemonGoApp_pokemonusage1
Pok_Grouped$social_sharing <- pok_new$social_sharing
Pok_Grouped$PokemonGo_Relate.Behaviour <- PokemonBehaviour
head(Pok_Grouped)
summary(Pok_Grouped)
########################
###Data Visualisation###
########################
# libraries required
library(ggplot2)
library(GGally)
require(foreign)
require(MASS)
require(Hmisc)
require(reshape2)
# Start plotting
ggpairs(Pok_Grouped)
boxplot(PhyscialActivity~education,
data=Pok_Grouped,
main="Different boxplots for gender",
xlab="Month Number",
ylab="Amount of Physical Activity"
)
boxplot(PhyscialActivity~Gender,
data=Pok_Grouped,
main="Different boxplots for Education Level",
xlab="Education Level",
ylab="Amount of Physical Activity"
)
dev.off()
###Gamma###
Pok.Gamma <- glm(PhyscialActivity ~ .^2, family = Gamma(link="identity"),
data=Pok_Grouped)
## variable selection
# use multiple for discovering best model
final_ols <- ols_step_best_subset(Pok.Gamma)
Seleced_Pok.Gamma <- stepAIC(Pok.Gamma)
# model observation
summary(Seleced_Pok.Gamma)
# assumption checking
par(mfrow = c(2, 2))
plot(Seleced_Pok.Gamma)
dev.off()
ggpairs(Pok_Grouped)
par(mfrow = c(2, 3))
for(i in 1:7){
if(i != 2)
boxplot(Pok.Grouped_New[,i]~education, data=Pok.Grouped_New)
}
par(mfrow = c(2, 3))
for(i in 1:7){
if(i != 2)
boxplot(Pok.Grouped[,i]~education, data=Pok.Grouped)
}
if(i != 2)
for(i in 1:7){
if(i != 2)
boxplot(Pok_Grouped[,i]~education, data=Pok_Grouped)
}
for(i in 1:7){
if(i != 3)
boxplot(Pok_Grouped[,i]~Gender, data=Pok_Grouped)
}
ggpairs(Pok_Grouped)
summary(Seleced_Pok.Gamma)
Pok.Gamma <- glm(PhyscialActivity ~ .^2, family = Gamma(link="identity"),
data=Pok_Grouped)
## variable selection
# use multiple for discovering best model
Seleced_Pok.Gamma <- stepAIC(Pok.Gamma)
# model observation
summary(Seleced_Pok.Gamma)
# assumption checking
par(mfrow = c(2, 2))
plot(Seleced_Pok.Gamma)
###Gamma###
Pok.Gamma <- glm(PhyscialActivity ~ .^2, family = Gamma(link="identity"),
data=Pok_Grouped)
## variable selection
# use multiple for discovering best model
Selected_Pok.Gamma <- stepAIC(Pok.Gamma)
# model observation
summary(Selected_Pok.Gamma)
# assumption checking
par(mfrow = c(2, 2))
plot(Selected_Pok.Gamma)
# import library required
library(dplyr)
library(psych)
library(olsrr)
library(car)
####################################
###Data Observation and Cleansing###
####################################
# loading dataset
load("pokemon.Rdata")
# observe data
head(pok,3)
# primary observe of data
summary(pok)
# checking number of missing value
sum(is.na(pok))
# checking unreasonable items in age
pok_age_s0 <- pok[pok$age <0,]
pok_age_s0
#@ This dataset is really good, without error or missing value
# However, according to the article, the records where the answer of
# ATTENTION_filter1 is not "Disagree" should be filtered
pok_new <- pok[pok$ATTENTION_filter1=="Disagree",]
pok_new$ATTENTION_filter1 <- NULL
summary(pok_new)
#################################
###Preparation of Grouped data###
#################################
###convert variables into numeric values###
pok_new[,4:30] <- pok_new[,4:30] %>% mutate_if(is.factor,as.numeric)
summary(pok_new)
###Justify the grouping###
# Calculate Cronbach's Alpha
## Attitude & StepsAttitude
alpha(pok_new[7:18], check.keys=TRUE)
# Physical Behaviour
alpha(pok_new[19:24], check.keys=TRUE)
# Pokemon Behviour
alpha(pok_new[27:29], check.keys=TRUE)
#@ Since alpha of behaviour and Pokemon behaviour are "Acceptable"
#@ we group them together
# variable grouping
Attitude <- rowMeans(pok_new[7:18])
Behaviour <- rowMeans(pok_new[19:24])
PokemonBehaviour <- rowMeans(pok_new[27:29])
# create new dataset
Pok_Grouped <- pok_new[c(4:6)]
Pok_Grouped$Attitude <- Attitude
Pok_Grouped$PhyscialActivity <- Behaviour
Pok_Grouped$PokemonGo_AppUsage <- pok_new$app_usage_PokemonGoApp_pokemonusage1
Pok_Grouped$social_sharing <- pok_new$social_sharing
Pok_Grouped$PokemonGo_Relate.Behaviour <- PokemonBehaviour
head(Pok_Grouped)
summary(Pok_Grouped)
########################
###Data Visualisation###
########################
# libraries required
library(ggplot2)
library(GGally)
require(foreign)
require(MASS)
require(Hmisc)
require(reshape2)
# result observation by summary
summary(Seleced_Pok.Gamma)
ggpairs(Pok_Grouped)
# libraries required
library(ggplot2)
library(GGally)
require(foreign)
require(MASS)
require(Hmisc)
require(reshape2)
# result observation by summary
summary(Seleced_Pok.Gamma)
ggpairs(Pok_Grouped)
# result observation by summary
summary(Seleced_Pok.Gamma)
# result observation by summary
summary(Seleced_Pok.Gamma)
# Relations visualization
New.Pok_Grouped <- Pok_Grouped
New.Pok_Grouped$social_sharing <- NULL
ggpairs(New.Pok_Grouped)
# Relations visualization for education
par(mfrow = c(2, 3))
for(i in 1:7){
if(i != 2)
boxplot(Pok_Grouped[,i]~education, data=Pok_Grouped)
}
# Relations visualization for Gender
for(i in 1:7){
if(i != 3)
boxplot(Pok_Grouped[,i]~Gender, data=Pok_Grouped)
}
par(mfrow = c(3, 3))
for(i in 1:8){
if(i != 2)
boxplot(Pok_Grouped[,i]~education, data=Pok_Grouped)
}
for(i in 1:8){
if(i != 3)
boxplot(Pok_Grouped[,i]~Gender, data=Pok_Grouped)
}
par(mfrow = c(3, 3))
if(i != 3)
for(i in 1:8){
if(i != 3)
boxplot(Pok_Grouped[,i]~Gender, data=Pok_Grouped)
}
# relations between Gender and education
boxplot(Geder~education, data=Pok_Grouped)
dev.off()
o
# relations between Gender and education
boxplot(Gender~education, data=Pok_Grouped)
# relations between Gender and education
boxplot(education~Gender, data=Pok_Grouped)
Pok_Grouped$Gender
pok$Gender
# relations between Gender and education
boxplot(education~Gender, data=Pok_Grouped, levels=c("Female", "Male")
# relations between Gender and education
boxplot(education~Gender, data=Pok_Grouped, levels=c("Female", "Male"))
# relations between Gender and education
boxplot(education~Gender, data=Pok_Grouped)
# relations between Gender and education
boxplot(education~Gender, data=Pok_Grouped, levels=c("Female", "Male"))
# relations between Gender and education
boxplot(education~Gender, data=Pok_Grouped, levels=c("Female", "Male"))
dev.off()
# relations between Gender and education
boxplot(education~Gender, data=Pok_Grouped, levels=c("Female", "Male"))
# relations between Gender and education
boxplot(education~Gender, data=Pok_Grouped, names=c("Female", "Male"))
# O1
plot(PhyscialActivity~PokemonGo_AppUsage, data=Pok_Grouped)
# result observation by summary
summary(Seleced_Pok.Gamma)
# O2: plot relations between PokemonGo_AppUsage and PokemonGo_Relate.Behaviour
plot(PokemonGo_Relate.Behaviour~PokemonGo_AppUsage, data=Pok_Grouped)
# o3
summary(Seleced_Pok.Gamma)
# model observation
summary(Selected_Pok.Linear)
boxplot(Attitude~Gender, data=Pok_Grouped, names=c("Female", "Male"))
boxplot(Attitude~education, data=Pok_Grouped, names=c("Female", "Male"))
boxplot(Attitude~education, data=Pok_Grouped, names=c("Female", "Male"))
boxplot(Attitude~education, data=Pok_Grouped)
boxplot(Attitude~education, data=Pok_Grouped)
abline(h=5.3, col = "Red", lty = 5)
boxplot(Attitude~education, data=Pok_Grouped) +
abline(h=5.4, col = "Red", lty = 5)
boxplot(Attitude~education, data=Pok_Grouped) +
abline(h=5.4, col = "Red", lty = 5)
boxplot(Attitude~education, data=Pok_Grouped) +
abline(h=5.35, col = "Red", lty = 5)
boxplot(Attitude~education, data=Pok_Grouped) +
abline(h=5.34, col = "Red", lty = 5)
boxplot(Attitude~education, data=Pok_Grouped)
abline(h=5.33, col = "Red", lty = 5)
# O4 relations between Gender and education
boxplot(education~Gender, data=Pok_Grouped, names=c("Female", "Male"))
#@ seems female have higher average education level
boxplot(Attitude~Gender, data=Pok_Grouped, names=c("Female", "Male"))
# full model construction
Pok.Linear <- glm(Attitude ~ .^2, data = Pok_Grouped)
## variable selection
# use multiple for discovering best model
Selected_Pok.Linear <- stepAIC(Pok.Linear)
# import library required
library(dplyr)
library(psych)
library(olsrr)
library(car)
####################################
###Data Observation and Cleansing###
####################################
# loading dataset
load("pokemon.Rdata")
# observe data
head(pok,3)
# primary observe of data
summary(pok)
# checking number of missing value
sum(is.na(pok))
# checking unreasonable items in age
pok_age_s0 <- pok[pok$age <0,]
pok_age_s0
#@ This dataset is really good, without error or missing value
# However, according to the article, the records where the answer of
# ATTENTION_filter1 is not "Disagree" should be filtered
pok_new <- pok[pok$ATTENTION_filter1=="Disagree",]
pok_new$ATTENTION_filter1 <- NULL
summary(pok_new)
#################################
###Preparation of Grouped data###
#################################
###convert variables into numeric values###
pok_new[,4:30] <- pok_new[,4:30] %>% mutate_if(is.factor,as.numeric)
summary(pok_new)
###Justify the grouping###
# Calculate Cronbach's Alpha
## Attitude & StepsAttitude
alpha(pok_new[7:18], check.keys=TRUE)
# Physical Behaviour
alpha(pok_new[19:24], check.keys=TRUE)
# Pokemon Behviour
alpha(pok_new[27:29], check.keys=TRUE)
#@ Since alpha of behaviour and Pokemon behaviour are "Acceptable"
#@ we group them together
# variable grouping
Attitude <- rowMeans(pok_new[7:18])
Behaviour <- rowMeans(pok_new[19:24])
PokemonBehaviour <- rowMeans(pok_new[27:29])
# create new dataset
Pok_Grouped <- pok_new[c(4:6)]
Pok_Grouped$Attitude <- Attitude
Pok_Grouped$PhyscialActivity <- Behaviour
Pok_Grouped$PokemonGo_AppUsage <- pok_new$app_usage_PokemonGoApp_pokemonusage1
Pok_Grouped$social_sharing <- pok_new$social_sharing
Pok_Grouped$PokemonGo_Relate.Behaviour <- PokemonBehaviour
head(Pok_Grouped)
summary(Pok_Grouped)
########################
###Data Visualisation###
########################
# libraries required
library(ggplot2)
library(GGally)
require(foreign)
require(MASS)
require(Hmisc)
require(reshape2)
###Relations visualisation###
ggpairs(Pok_Grouped)
par(mfrow = c(2, 3))
for(i in 1:7){
if(i != 2)
boxplot(Pok_Grouped[,i]~education, data=Pok_Grouped)
}
for(i in 1:7){
if(i != 3)
boxplot(Pok_Grouped[,i]~Gender, data=Pok_Grouped)
}
# full model construction
Pok.Linear <- glm(Attitude ~ .^2, data = Pok_Grouped)
## variable selection
# use multiple for discovering best model
Selected_Pok.Linear <- stepAIC(Pok.Linear)
# full model construction
Pok.Linear <- glm(Attitude ~ education*age, data = Pok_Grouped)
# full model construction
Pok.Linear <- glm(Attitude ~ education*age, data = Pok_Grouped)
## variable selection
# use multiple for discovering best model
Selected_Pok.Linear <- stepAIC(Pok.Linear)
# model observation
summary(Selected_Pok.Linear)
# assumption checking
par(mfrow = c(2, 2))
plot(Selected_Pok.Linear)
###log-linear model###
# full model construction
Pok.Log_Linear <- glm(log(PhyscialActivity) ~ education*age, data = Pok_Grouped)
## variable selection
# apply AIC
Selected_Pok.Log_Linear <- stepAIC(Pok.Log_Linear)
# model observation
summary(Selected_Pok.Log_Linear)
# assumption checking
par(mfrow = c(2, 2))
plot(Selected_Pok.Log_Linear)
###log10-linear model###
# full model construction
Pok.Log10_Linear <- glm(log10(PhyscialActivity) ~ education*age, data = Pok_Grouped)
## variable selection
# apply AIC
Selected_Pok.Log10_Linear <- stepAIC(Pok.Log10_Linear)
# model observation
summary(Selected_Pok.Log10_Linear)
# assumption checking
par(mfrow = c(2, 2))
plot(Selected_Pok.Log10_Linear)
Pok.Gamma <- glm(PhyscialActivity ~ education*age, family = Gamma(link="identity"),
data=Pok_Grouped)
## variable selection
# use multiple for discovering best model
final_ols <- ols_step_best_subset(Pok.Gamma)
Seleced_Pok.Gamma <- stepAIC(Pok.Gamma)
# model observation
summary(Seleced_Pok.Gamma)
# assumption checking
par(mfrow = c(2, 2))
plot(Seleced_Pok.Gamma)
