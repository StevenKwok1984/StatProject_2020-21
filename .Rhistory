# primary observe of data
summary(pok)
# checking number of missing value
sum(is.na(pok))
# checking unreasonable items in age
pok_age_s0 <- pok[pok$age <0,]
pok_age_s0
#@ This dataset is really good, without error or missing value
# However, according to the article, the records where the answer of
# ATTENTION_filter1 is not "Disagree" should be filtered
pok_new <- pok[pok$ATTENTION_filter1=="Disagree",]
pok_new$ATTENTION_filter1 <- NULL
summary(pok_new)
#################################
###Preparation of Grouped data###
#################################
###convert variables into numeric values###
pok_new[,4:30] <- pok_new[,4:30] %>% mutate_if(is.factor,as.numeric)
summary(pok_new)
###Justify the grouping###
# Calculate Cronbach's Alpha
## Attitude & StepsAttitude
alpha(pok_new[7:18], check.keys=TRUE)
# Physical Behaviour
alpha(pok_new[19:24], check.keys=TRUE)
# Pokemon Behviour
alpha(pok_new[27:29], check.keys=TRUE)
#@ Since alpha of behaviour and Pokemon behaviour are "Acceptable"
#@ we group them together
# variable grouping
Attitude <- rowMeans(pok_new[7:18])
Behaviour <- rowMeans(pok_new[19:24])
PokemonBehaviour <- rowMeans(pok_new[27:29])
# create new dataset
Pok_Grouped <- pok_new[c(4:6)]
Pok_Grouped$Attitude <- Attitude
Pok_Grouped$PhysicalActivity <- Behaviour
Pok_Grouped$PokemonGo_AppUsage <- pok_new$app_usage_PokemonGoApp_pokemonusage1
Pok_Grouped$social_sharing <- pok_new$social_sharing
Pok_Grouped$PokemonGo_Relate.Behaviour <- PokemonBehaviour
head(Pok_Grouped)
summary(Pok_Grouped)
count(Pok_Grouped)
# import library required
library(dplyr)
library(psych)
library(olsrr)
library(car)
library(mgcv)
####################################
###Data Observation and Cleansing###
####################################
# loading dataset
load("pokemon.Rdata")
# observe data
head(pok,3)
# primary observe of data
summary(pok)
# checking number of missing value
sum(is.na(pok))
# checking unreasonable items in age
pok_age_s0 <- pok[pok$age <0,]
pok_age_s0
#@ This dataset is really good, without error or missing value
# However, according to the article, the records where the answer of
# ATTENTION_filter1 is not "Disagree" should be filtered
pok_new <- pok[pok$ATTENTION_filter1=="Disagree",]
pok_new$ATTENTION_filter1 <- NULL
summary(pok_new)
#################################
###Preparation of Grouped data###
#################################
###convert variables into numeric values###
pok_new[,4:30] <- pok_new[,4:30] %>% mutate_if(is.factor,as.numeric)
summary(pok_new)
###Justify the grouping###
# Calculate Cronbach's Alpha
## Attitude & StepsAttitude
alpha(pok_new[7:18], check.keys=TRUE)
# Physical Behaviour
alpha(pok_new[19:24], check.keys=TRUE)
# Pokemon Behviour
alpha(pok_new[27:29], check.keys=TRUE)
#@ Since alpha of behaviour and Pokemon behaviour are "Acceptable"
#@ we group them together
# variable grouping
Attitude <- rowMeans(pok_new[7:18])
Behaviour <- rowMeans(pok_new[19:24])
PokemonBehaviour <- rowMeans(pok_new[27:29])
# create new dataset
Pok_Grouped <- pok_new[c(4:6)]
Pok_Grouped$Attitude <- Attitude
Pok_Grouped$PhysicalActivity <- Behaviour
Pok_Grouped$PokemonGo_AppUsage <- pok_new$app_usage_PokemonGoApp_pokemonusage1
Pok_Grouped$social_sharing <- pok_new$social_sharing
Pok_Grouped$PokemonGo_Relate.Behaviour <- PokemonBehaviour
head(Pok_Grouped)
count(Pok_Grouped)
pok$PokemonPastBehavior_pokPast4_pokemonusage_NOT_USED
########################
###Data Visualisation###
########################
# libraries required
library(ggplot2)
library(GGally)
require(foreign)
require(MASS)
require(Hmisc)
require(reshape2)
###Relations visualisation###
ggpairs(Pok_Grouped)
dev.off()
# gender vs remaining
par(mfrow = c(2, 2))
boxplot(education~Gender, data=Pok_Grouped, names=c("Female","Male"))
boxplot(Attitude~Gender, data=Pok_Grouped, names=c("Female","Male"))
boxplot(PhysicalActivity~Gender, data=Pok_Grouped, names=c("Female","Male"))
boxplot(PokemonGo_Relate.Behaviour~Gender, data=Pok_Grouped, names=c("Female","Male"))
dev.off()
# education level vs remaining
par(mfrow = c(2, 2))
boxplot(age~education, data=Pok_Grouped)
boxplot(Attitude~education, data=Pok_Grouped)
boxplot(PhysicalActivity~education, data=Pok_Grouped)
boxplot(PokemonGo_AppUsage~education, data=Pok_Grouped)
dev.off()
###Linear model###
Pok.Linear <- glm(PhysicalActivity ~ .^2 + I(age^2) + I(education^2) +
+ I(Gender^2) + I(Attitude^2) + I(PokemonGo_AppUsage^2) +
I(social_sharing^2) + I(PokemonGo_Relate.Behaviour^2),
data=Pok_Grouped)
summary(Pok.Linear)
###Linear model###
Pok.Linear <- glm(PhysicalActivity ~ .^2 + I(age^2) + I(education^2) +
+ I(Attitude^2) + I(PokemonGo_AppUsage^2) +
I(social_sharing^2) + I(PokemonGo_Relate.Behaviour^2),
data=Pok_Grouped)
summary(Pok.Linear)
# import necessary libraries
library(dplyr)
library(psych)
library(olsrr)
library(car)
library(mgcv)
####################################
###Data Observation and Cleansing###
####################################
# loading dataset
load("pokemon.Rdata")
# observe data
head(pok,3)
# primary observe of data
summary(pok)
# checking number of missing value
sum(is.na(pok))
# checking unreasonable items in age
pok_age_s0 <- pok[pok$age <0,]
pok_age_s0
#@ This dataset is really good, without error or missing value
# However, according to the article, the records where the answer of
# ATTENTION_filter1 is not "Disagree" should be filtered
pok_new <- pok[pok$ATTENTION_filter1=="Disagree",]
pok_new$ATTENTION_filter1 <- NULL
summary(pok_new)
#################################
###Preparation of Grouped data###
#################################
###convert variables into numeric values###
pok_new[,4:30] <- pok_new[,4:30] %>% mutate_if(is.factor,as.numeric)
summary(pok_new)
# Calculate Cronbach's Alpha for grouping justification
## Attitude
alpha(pok_new[7:18], check.keys=TRUE)
# Physical Behaviour
alpha(pok_new[19:24], check.keys=TRUE)
# Pokemon Go related behw=aviour Behviour
alpha(pok_new[27:29], check.keys=TRUE)
#@ Since all alpha scores of targeted series of variables are "Acceptable",
#@ we grouped them together
# variable grouping
Attitude <- rowMeans(pok_new[7:18])
Behaviour <- rowMeans(pok_new[19:24])
PokemonBehaviour <- rowMeans(pok_new[27:29])
# create new dataset with grouped data
Pok_Grouped <- pok_new[c(4:6)]
Pok_Grouped$Attitude <- Attitude
Pok_Grouped$PhysicalActivity <- Behaviour
Pok_Grouped$PokemonGo_AppUsage <- pok_new$app_usage_PokemonGoApp_pokemonusage1
Pok_Grouped$social_sharing <- pok_new$social_sharing
Pok_Grouped$PokemonGo_Relate.Behaviour <- PokemonBehaviour
# show the first few lines of the dataset
head(Pok_Grouped)
# count number of records
count(Pok_Grouped)
########################
###Data Visualisation###
########################
# libraries required for visualisation
library(ggplot2)
library(GGally)
require(foreign)
require(MASS)
require(Hmisc)
require(reshape2)
###Relations visualisation###
# scatter plot
ggpairs(Pok_Grouped)
# gender vs remaining
par(mfrow = c(2, 2))
boxplot(education~Gender, data=Pok_Grouped, names=c("Female","Male"))
boxplot(Attitude~Gender, data=Pok_Grouped, names=c("Female","Male"))
boxplot(PhysicalActivity~Gender, data=Pok_Grouped, names=c("Female","Male"))
boxplot(PokemonGo_Relate.Behaviour~Gender, data=Pok_Grouped,
names=c("Female","Male"))
dev.off()
# education level vs remaining
par(mfrow = c(2, 2))
boxplot(age~education, data=Pok_Grouped)
boxplot(Attitude~education, data=Pok_Grouped)
boxplot(PhysicalActivity~education, data=Pok_Grouped)
boxplot(PokemonGo_AppUsage~education, data=Pok_Grouped)
dev.off()
########################
###Model Constructing###
########################
###Linear model###
Pok.Linear <- glm(PhysicalActivity ~ .^2 + I(age^2) + I(education^2) +
+ I(Attitude^2) + I(PokemonGo_AppUsage^2) +
I(social_sharing^2) + I(PokemonGo_Relate.Behaviour^2),
data=Pok_Grouped)
# full model summary
summary(Pok.Linear)
# assumption checking
par(mfrow = c(2, 2))
plot(Pok.Linear)
## variable selection
# use multiple for discovering best model
Final_Pok.Linear <- stepAIC(Pok.Linear)
# model observation
summary(Final_Pok.Linear)
# assumption checking
par(mfrow = c(2, 2))
plot(Final_Pok.Linear)
boxplot(education~Gender, data=Pok_Grouped, names=c("Female","Male"))
boxplot(Attitude~Gender, data=Pok_Grouped, names=c("Female","Male"))
boxplot(PhysicalActivity~Gender, data=Pok_Grouped, names=c("Female","Male"))
boxplot(PokemonGo_Relate.Behaviour~Gender, data=Pok_Grouped,
names=c("Female","Male"))
dev.off()
# education level vs remaining
par(mfrow = c(2, 2))
boxplot(age~education, data=Pok_Grouped)
boxplot(Attitude~education, data=Pok_Grouped)
boxplot(PhysicalActivity~education, data=Pok_Grouped)
boxplot(PokemonGo_AppUsage~education, data=Pok_Grouped)
# justification for interaction terms
ggplot(Pok_Grouped, aes(x = age, y = PhysicalActivity, color = education)) +
geom_jitter() +
labs(x = "Age", y = "Amount of Physical Activity", color = "education level") +
geom_smooth(method = "lm", se = FALSE)
# import necessary libraries
library(dplyr)
library(psych)
library(olsrr)
library(car)
library(mgcv)
####################################
###Data Observation and Cleansing###
####################################
# loading dataset
load("pokemon.Rdata")
# observe data
head(pok,3)
# primary observe of data
summary(pok)
# checking number of missing value
sum(is.na(pok))
# checking unreasonable items in age
pok_age_s0 <- pok[pok$age <0,]
pok_age_s0
#@ This dataset is really good, without error or missing value
# However, according to the article, the records where the answer of
# ATTENTION_filter1 is not "Disagree" should be filtered
pok_new <- pok[pok$ATTENTION_filter1=="Disagree",]
pok_new$ATTENTION_filter1 <- NULL
summary(pok_new)
#################################
###Preparation of Grouped data###
#################################
###convert variables into numeric values###
pok_new[,4:30] <- pok_new[,4:30] %>% mutate_if(is.factor,as.numeric)
summary(pok_new)
# Calculate Cronbach's Alpha for grouping justification
## Attitude
alpha(pok_new[7:18], check.keys=TRUE)
# Physical Behaviour
alpha(pok_new[19:24], check.keys=TRUE)
# Pokemon Go related behw=aviour Behviour
alpha(pok_new[27:29], check.keys=TRUE)
#@ Since all alpha scores of targeted series of variables are "Acceptable",
#@ we grouped them together
# variable grouping
Attitude <- rowMeans(pok_new[7:18])
Behaviour <- rowMeans(pok_new[19:24])
PokemonBehaviour <- rowMeans(pok_new[27:29])
# create new dataset with grouped data
Pok_Grouped <- pok_new[c(4:6)]
Pok_Grouped$Attitude <- Attitude
Pok_Grouped$PhysicalActivity <- Behaviour
Pok_Grouped$PokemonGo_AppUsage <- pok_new$app_usage_PokemonGoApp_pokemonusage1
Pok_Grouped$social_sharing <- pok_new$social_sharing
Pok_Grouped$PokemonGo_Relate.Behaviour <- PokemonBehaviour
# show the first few lines of the dataset
head(Pok_Grouped)
# count number of records
count(Pok_Grouped)
########################
###Data Visualisation###
########################
# libraries required for visualisation
library(ggplot2)
library(GGally)
require(foreign)
require(MASS)
require(Hmisc)
require(reshape2)
###Relations visualisation###
# scatter plot
ggpairs(Pok_Grouped)
# gender vs remaining
par(mfrow = c(2, 2))
boxplot(education~Gender, data=Pok_Grouped, names=c("Female","Male"))
boxplot(Attitude~Gender, data=Pok_Grouped, names=c("Female","Male"))
boxplot(PhysicalActivity~Gender, data=Pok_Grouped, names=c("Female","Male"))
boxplot(PokemonGo_Relate.Behaviour~Gender, data=Pok_Grouped,
names=c("Female","Male"))
dev.off()
# education level vs remaining
par(mfrow = c(2, 2))
boxplot(age~education, data=Pok_Grouped)
boxplot(Attitude~education, data=Pok_Grouped)
boxplot(PhysicalActivity~education, data=Pok_Grouped)
boxplot(PokemonGo_AppUsage~education, data=Pok_Grouped)
dev.off()
########################
###Model Constructing###
########################
###Linear model###
Pok.Linear <- glm(PhysicalActivity ~ .^2 + I(age^2) + I(education^2) +
+ I(Attitude^2) + I(PokemonGo_AppUsage^2) +
I(social_sharing^2) + I(PokemonGo_Relate.Behaviour^2),
data=Pok_Grouped)
# full model summary
summary(Pok.Linear)
# assumption checking
par(mfrow = c(2, 2))
plot(Pok.Linear)
## variable selection
# use multiple for discovering best model
Final_Pok.Linear <- stepAIC(Pok.Linear)
# model observation
summary(Final_Pok.Linear)
# assumption checking
par(mfrow = c(2, 2))
plot(Final_Pok.Linear)
dev.off()
# justification for interaction terms
ggplot(Pok_Grouped, aes(x = age, y = PhysicalActivity, color = education)) +
geom_jitter() +
labs(x = "Age", y = "Amount of Physical Activity", color = "education level") +
geom_smooth(method = "lm", se = FALSE)
# justification for interaction terms
ggplot(Pok_Grouped, aes(x = age, y = PhysicalActivity, color = gender)) +
geom_jitter() +
labs(x = "Age", y = "Amount of Physical Activity", color = "education level") +
geom_smooth(method = "lm", se = FALSE)
# justification for interaction terms
ggplot(Pok_Grouped, aes(x = age, y = PhysicalActivity, color = Gender)) +
geom_jitter() +
labs(x = "Age", y = "Amount of Physical Activity", color = "education level") +
geom_smooth(method = "lm", se = FALSE)
# justification for interaction terms
ggplot(Pok_Grouped, aes(x = education, y = PhysicalActivity, color = age)) +
geom_jitter() +
labs(x = "Age", y = "Amount of Physical Activity", color = "education level") +
geom_smooth(method = "lm", se = FALSE)
# justification for interaction terms
ggplot(Pok_Grouped, aes(x = education, y = age, color = age)) +
geom_jitter() +
labs(x = "Age", y = "Amount of Physical Activity", color = "education level") +
geom_smooth(method = "lm", se = FALSE)
# justification for interaction terms
ggplot(Pok_Grouped, aes(x = age, y = education, color = education)) +
geom_jitter() +
labs(x = "Age", y = "education level", color = "education level") +
geom_smooth(method = "lm", se = FALSE)
# justification for interaction terms
ggplot(Pok_Grouped, aes(x = education, y = age, color = education)) +
geom_jitter() +
labs(x = "Age", y = "education level", color = "education level") +
geom_smooth(method = "lm", se = FALSE)
# justification for interaction terms
ggplot(Pok_Grouped, aes(x = education, y = PhysicalActivity, color = education)) +
geom_jitter() +
labs(x = "Age", y = "education level", color = "education level") +
geom_smooth(method = "lm", se = FALSE)
# justification for interaction terms
ggplot(Pok_Grouped, aes(x = education, y = PhysicalActivity, color = education)) +
geom_jitter() +
labs(x = "Age", y = "Amount of Physical PActivity", color = "education level") +
geom_smooth(method = "lm", se = FALSE)
# model for further comparison
Comp_Pok.Linear <- glm(formula = PhysicalActivity ~ age + education + Gender +
Attitude + PokemonGo_AppUsage +
I(Attitude^2) + age:education +
education:Attitude, data = Pok_Grouped)
# justification for interaction terms
ggplot(Pok_Grouped, aes(x = education, y = PhysicalActivity, color = education)) +
geom_jitter() +
labs(x = "Age", y = "Amount of Physical PActivity", color = "education level") +
geom_smooth(method = "lm", se = FALSE)
# justification for interaction between age and education level
ggplot(Pok_Grouped, aes(x = education, y = PhysicalActivity, color = education)) +
geom_jitter() +
labs(x = "Age", y = "Amount of Physical Activity", color = "education level") +
geom_smooth(method = "lm", se = FALSE)
# justification for interaction between age and education level
ggplot(Pok_Grouped, aes(x = age, y = PhysicalActivity, color = education)) +
geom_jitter() +
labs(x = "Age", y = "Amount of Physical Activity", color = "education level") +
geom_smooth(method = "lm", se = FALSE)
# justification for interaction between age and education level
ggplot(Pok_Grouped, aes(x = Attitude, y = PhysicalActivity, color = education)) +
geom_jitter() +
labs(x = "Age", y = "Amount of Physical Activity", color = "education level") +
geom_smooth(method = "lm", se = FALSE)
# justification for interaction between age and education level
ggplot(Pok_Grouped, aes(x = Attitude, y = Attitude, color = education)) +
geom_jitter() +
labs(x = "Age", y = "Amount of Physical Activity", color = "education level") +
geom_smooth(method = "lm", se = FALSE)
# justification for interaction between age and education level
ggplot(Pok_Grouped, aes(x = Attitude, y = education, color = education)) +
geom_jitter() +
labs(x = "Age", y = "Amount of Physical Activity", color = "education level") +
geom_smooth(method = "lm", se = FALSE)
# justification for interaction between age and education level
ggplot(Pok_Grouped, aes(x = Attitude, y = education, color = education)) +
geom_jitter() +
labs(x = "Attitude towards sports", y = "education level", color = "education level") +
geom_smooth(method = "lm", se = FALSE)
# justification for interaction between age and education level
ggplot(Pok_Grouped, aes(x = education, y = Attitude, color = education)) +
geom_jitter() +
labs(x = "Attitude towards sports", y = "education level", color = "education level") +
geom_smooth(method = "lm", se = FALSE)
# justification for interaction between age and education level
ggplot(Pok_Grouped, aes(x = education, y = Attitude, color = Attitude)) +
geom_jitter() +
labs(x = "Attitude towards sports", y = "education level", color = "education level") +
geom_smooth(method = "lm", se = FALSE)
# justification for interaction between age and education level
ggplot(Pok_Grouped, aes(x = age, y = PhysicalActivity, color = education)) +
geom_jitter() +
labs(x = "Age", y = "Amount of Physical Activity", color = "education level") +
geom_smooth(method = "lm", se = FALSE)
# justification for interaction between age and education level
ggplot(Pok_Grouped, aes(x = education, y = PhysicalActivity, color = Attitude)) +
geom_jitter() +
labs(x = "education level", y = "PhysicalActivityl", color = "Attitude towards sports") +
geom_smooth(method = "lm", se = FALSE)
# justification for interaction between age and education level
ggplot(Pok_Grouped, aes(x = Attitude, y = PhysicalActivity, color = education)) +
geom_jitter() +
labs(x = "Attitude", y = "PhysicalActivityl", color = "education") +
geom_smooth(method = "lm", se = FALSE)
# justification for interaction between age and education level
ggplot(Pok_Grouped, aes(x = education, y = PhysicalActivity, color = as.factor(education))) +
geom_jitter() +
labs(x = "Age", y = "Amount of Physical Activity", color = "education level") +
geom_smooth(method = "lm", se = FALSE)
# justification for interaction between age and education level
ggplot(Pok_Grouped, aes(x = Attitude, y = PhysicalActivity, color = as.factor(education))) +
geom_jitter() +
labs(x = "Attitude", y = "PhysicalActivityl", color = "education") +
geom_smooth(method = "lm", se = FALSE)
# justification for interaction between age and education level
ggplot(Pok_Grouped, aes(x = education, y = PhysicalActivity, color = as.factor(education))) +
geom_jitter() +
labs(x = "Age", y = "Amount of Physical Activity", color = "education level") +
geom_smooth(method = "lm", se = FALSE)
# justification for interaction between age and education level
ggplot(Pok_Grouped, aes(x = age, y = PhysicalActivity, color = as.factor(education))) +
geom_jitter() +
labs(x = "Age", y = "Amount of Physical Activity", color = "education level") +
geom_smooth(method = "lm", se = FALSE)
# justification for interaction between age and education level
ggplot(Pok_Grouped, aes(x = age, y = PhysicalActivity, color = as.factor(education))) +
geom_jitter() +
labs(x = "Age", y = "Amount of Physical Activity", color = "education level") +
geom_smooth(method = "lm", se = FALSE)
# justification for interaction between Attitude and education level
ggplot(Pok_Grouped, aes(x = Attitude, y = PhysicalActivity, color = as.factor(education))) +
geom_jitter() +
labs(x = "Attitude towards Physical Activity", y = "Amount PhysicalActivityl",
color = "education level") +
geom_smooth(method = "lm", se = FALSE)
# model for further comparison
Comp_Pok.Linear <- glm(formula = PhysicalActivity ~ age + education + Gender +
Attitude + PokemonGo_AppUsage +
I(Attitude^2) + age:education +
education:Attitude, data = Pok_Grouped)
