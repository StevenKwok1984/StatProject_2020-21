plot(Pok_Log.Linear)
dev.off()
#assumption checking
par(mfrow = c(2, 2))
plot(Pok_Log.Linear)
###Simple linear model###
# full model construction
Pok_Log.Linear <- lm(log(PhyscialActivity) ~ log(age) + log(education) +
log(Gender) + Attitude + StepsAttitude +
log(PokemonGo_AppUsage) + log(social_sharing) +
PokemonRelate_Behaviour, data = Pok_Grouped)
#assumption checking
par(mfrow = c(2, 2))
plot(Pok_Log.Linear)
# library required
library(olsrr)
###Simple linear model###
# full model construction
Pok_Log.Linear <- lm(log(PhyscialActivity) ~ log(age) + log(education) +
log(Gender) + log(Attitude) + StepsAttitude +
log(PokemonGo_AppUsage) + log(social_sharing) +
PokemonRelate_Behaviour, data = Pok_Grouped)
#assumption checking
par(mfrow = c(2, 2))
plot(Pok_Log.Linear)
###Simple linear model###
# full model construction
Pok_Log.Linear <- lm(log(PhyscialActivity) ~ log(age) + log(education) +
log(Gender) + log(Attitude) + log(StepsAttitude) +
log(PokemonGo_AppUsage) + log(social_sharing) +
log(PokemonRelate_Behaviour), data = Pok_Grouped)
#assumption checking
par(mfrow = c(2, 2))
plot(Pok_Log.Linear)
# import library required
library(dplyr)
library(psych)
####################################
###Data Observation and Cleansing###
####################################
# loading dataset
load("pokemon.Rdata")
# observe data
head(pok,3)
# primary observe of data
summary(pok)
# checking number of missing value
sum(is.na(pok))
# checking unreasonable items in age
pok_age_s0 <- pok[pok$age <0,]
pok_age_s0
#@ This dataset is really good, without error or missing value
# However, according to the article, the records where the answer of
# ATTENTION_filter1 is not "Disagree" should be filtered
pok_new <- pok[pok$ATTENTION_filter1=="Disagree",]
pok_new$ATTENTION_filter1 <- NULL
summary(pok_new)
#################################
###Preparation of Grouped data###
#################################
###convert variables into numeric values###
pok_new[,4:30] <- pok_new[,4:30] %>% mutate_if(is.factor,as.numeric)
summary(pok_new)
###Justify the grouping###
# Calculate Cronbach's Alpha
# Attitude
alpha(pok_new[7:12], check.keys=TRUE)
# steps Attitude
alpha(pok_new[13:18], check.keys=TRUE)
# Behaviour
alpha(pok_new[19:24], check.keys=TRUE)
# Pokemon Behviour
alpha(pok_new[27:29], check.keys=TRUE)
#@ Since alpha of behaviour and Pokemon behaviour are "Acceptable"
#@ we group them together
# variable grouping
Attitude <- rowMeans(pok_new[7:12])
StepAttitude <- rowMeans(pok_new[13:18])
Behqviour <- rowMeans(pok_new[19:24])
PokemonBehaviour <- rowMeans(pok_new[27:29])
# create new dataset
Pok_Grouped <- pok_new[c(4:6)]
Pok_Grouped$Attitude <- Attitude
Pok_Grouped$StepsAttitude <- StepAttitude
Pok_Grouped$PhyscialActivity <- Behaviour
Pok_Grouped$PokemonGo_AppUsage <- pok_new$app_usage_PokemonGoApp_pokemonusage1
Pok_Grouped$social_sharing <- pok_new$social_sharing
Pok_Grouped$PokemonRelate_Behaviour <- PokemonBehaviour
head(Pok_Grouped)
summary(Pok_Grouped)
########################
###Data Visualisation###
########################
# libraries required
library(ggplot2)
library(GGally)
require(foreign)
require(MASS)
require(Hmisc)
require(reshape2)
# Start plotting
ggpairs(Pok_Grouped)
boxplot(PhyscialActivity~education,
data=Pok_Grouped,
main="Different boxplots for gender",
xlab="Month Number",
ylab="Amount of Physical Activity"
)
boxplot(PhyscialActivity~Gender,
data=Pok_Grouped,
main="Different boxplots for Education Level",
xlab="Education Level",
ylab="Amount of Physical Activity"
)
# library required
library(olsrr)
###Simple linear model###
# full model construction
Pok_Log.Linear <- lm(log(PhyscialActivity) ~ log(age) + log(education) +
log(Gender) + log(Attitude) + log(StepsAttitude) +
log(PokemonGo_AppUsage) + log(social_sharing) +
log(PokemonRelate_Behaviour), data = Pok_Grouped)
#assumption checking
par(mfrow = c(2, 2))
plot(Pok_Log.Linear)
# Model observation
summary(Pok_Log.Linear)
ols_step_best_subset(Pok_Log.Linear)
# t-test
Pok_Log.Linear <- lm(log(PhyscialActivity) ~ log(age) + log(education) +
log(Gender) + log(Attitude) + log(StepsAttitude) +
log(PokemonGo_AppUsage) +
log(PokemonRelate_Behaviour), data = Pok_Grouped)
summary(Pok_Log.Linear)
# t-test
Pok_Log.Linear <- lm(log(PhyscialActivity) ~ log(age) + log(education) +
log(Gender) + log(StepsAttitude) +
log(PokemonGo_AppUsage) +
log(PokemonRelate_Behaviour), data = Pok_Grouped)
summary(Pok_Log.Linear)
# t-test
Pok_Log.Linear <- lm(log(PhyscialActivity) ~ log(education) +
log(Gender) + log(StepsAttitude) +
log(PokemonGo_AppUsage) +
log(PokemonRelate_Behaviour), data = Pok_Grouped)
summary(Pok_Log.Linear)
stepAIC(Pok_Log.Linear)
# t-test
Pok_Log.Linear <- lm(log(PhyscialActivity) ~ log(education) +
log(StepsAttitude) +
log(PokemonGo_AppUsage) +
log(PokemonRelate_Behaviour), data = Pok_Grouped)
summary(Pok_Log.Linear)
# Start plotting
ggpairs(Pok_Grouped)
dev.off()
par(mfrow = c(2, 2))
ggplot(PhyscialActivity~social_sharing, data=Pok_Grouped)
# import library required
library(dplyr)
library(psych)
####################################
###Data Observation and Cleansing###
####################################
# loading dataset
load("pokemon.Rdata")
# observe data
head(pok,3)
# primary observe of data
summary(pok)
# checking number of missing value
sum(is.na(pok))
# checking unreasonable items in age
pok_age_s0 <- pok[pok$age <0,]
pok_age_s0
#@ This dataset is really good, without error or missing value
# However, according to the article, the records where the answer of
# ATTENTION_filter1 is not "Disagree" should be filtered
pok_new <- pok[pok$ATTENTION_filter1=="Disagree",]
pok_new$ATTENTION_filter1 <- NULL
summary(pok_new)
#################################
###Preparation of Grouped data###
#################################
###convert variables into numeric values###
pok_new[,4:30] <- pok_new[,4:30] %>% mutate_if(is.factor,as.numeric)
summary(pok_new)
###Justify the grouping###
# Calculate Cronbach's Alpha
# Attitude
alpha(pok_new[7:12], check.keys=TRUE)
# steps Attitude
alpha(pok_new[13:18], check.keys=TRUE)
# Behaviour
alpha(pok_new[19:24], check.keys=TRUE)
# Pokemon Behviour
alpha(pok_new[27:29], check.keys=TRUE)
#@ Since alpha of behaviour and Pokemon behaviour are "Acceptable"
#@ we group them together
# variable grouping
Attitude <- rowMeans(pok_new[7:12])
StepAttitude <- rowMeans(pok_new[13:18])
Behqviour <- rowMeans(pok_new[19:24])
PokemonBehaviour <- rowMeans(pok_new[27:29])
# create new dataset
Pok_Grouped <- pok_new[c(4:6)]
Pok_Grouped$Attitude <- Attitude
Pok_Grouped$StepsAttitude <- StepAttitude
Pok_Grouped$PhyscialActivity <- Behaviour
Pok_Grouped$PokemonGo_AppUsage <- pok_new$app_usage_PokemonGoApp_pokemonusage1
Pok_Grouped$social_sharing <- pok_new$social_sharing
Pok_Grouped$PokemonRelate_Behaviour <- PokemonBehaviour
head(Pok_Grouped)
summary(Pok_Grouped)
########################
###Data Visualisation###
########################
# libraries required
library(ggplot2)
library(GGally)
require(foreign)
require(MASS)
require(Hmisc)
require(reshape2)
# Start plotting
ggpairs(Pok_Grouped)
boxplot(PhyscialActivity~education,
data=Pok_Grouped,
main="Different boxplots for gender",
xlab="Month Number",
ylab="Amount of Physical Activity"
)
boxplot(PhyscialActivity~Gender,
data=Pok_Grouped,
main="Different boxplots for Education Level",
xlab="Education Level",
ylab="Amount of Physical Activity"
)
dev.off()
par(mfrow = c(2, 2))
ggplot(PhyscialActivity~social_sharing, data=Pok_Grouped)
rlang::last_error()
ggplot(PhyscialActivity~social_sharing, data=Pok_Grouped)
dev.off()
ggplot(Pok_Grouped, aes(PhyscialActivity, social_sharing, colour = class)) +
geom_point()
dev.off()
p2 <- ggplot(Pok_Grouped, aes(x = social_sharing, y = PhyscialActivity)) +
geom_point() +
labs(x = "Social Sharing", y = "Amount of Physcial Activity") +
geom_smooth(method = "lm", se = F)
p2
p2 <- ggplot(Pok_Grouped, aes(x = PokemonGo_AppUsage, y = PhyscialActivity)) +
geom_point() +
labs(x = "PokemonGo_AppUsage", y = "Amount of Physcial Activity") +
geom_smooth(method = "lm", se = F)
p2
p3 <- ggplot(Pok_Grouped, aes(x = social_sharing, y = PokemonGo_AppUsage)) +
geom_point() +
labs(x = "Social Sharing", y = "PokemonGo_AppUsage") +
geom_smooth(method = "lm", se = F)
p3
dev.off()
par(mfrow = c(2, 2))
ggplot(Pok_Grouped, aes(x = social_sharing, y = PhyscialActivity)) +
geom_point() +
labs(x = "Social Sharing", y = "Amount of Physcial Activity") +
geom_smooth(method = "lm", se = F)
ggplot(Pok_Grouped, aes(x = PokemonGo_AppUsage, y = PhyscialActivity)) +
geom_point() +
labs(x = "PokemonGo_AppUsage", y = "Amount of Physcial Activity") +
geom_smooth(method = "lm", se = F)
ggplot(Pok_Grouped, aes(x = social_sharing, y = PokemonGo_AppUsage)) +
geom_point() +
labs(x = "Social Sharing", y = "PokemonGo_AppUsage") +
geom_smooth(method = "lm", se = F)
par(mfrow = c(2, 2))
ggplot(Pok_Grouped, aes(x = social_sharing, y = PhyscialActivity)) +
geom_point() +
labs(x = "Social Sharing", y = "Amount of Physcial Activity") +
geom_smooth(method = "lm", se = F)
ggplot(Pok_Grouped, aes(x = PokemonGo_AppUsage, y = PhyscialActivity)) +
geom_point() +
labs(x = "PokemonGo_AppUsage", y = "Amount of Physcial Activity") +
geom_smooth(method = "lm", se = F)
ggplot(Pok_Grouped, aes(x = social_sharing, y = PokemonGo_AppUsage)) +
geom_point() +
labs(x = "Social Sharing", y = "PokemonGo_AppUsage") +
geom_smooth(method = "lm", se = F)
dev.off()
par(mfrow = c(3, 1))
ggplot(Pok_Grouped, aes(x = social_sharing, y = PhyscialActivity)) +
geom_point() +
labs(x = "Social Sharing", y = "Amount of Physcial Activity") +
geom_smooth(method = "lm", se = F)
ggplot(Pok_Grouped, aes(x = PokemonGo_AppUsage, y = PhyscialActivity)) +
geom_point() +
labs(x = "PokemonGo_AppUsage", y = "Amount of Physcial Activity") +
geom_smooth(method = "lm", se = F)
ggplot(Pok_Grouped, aes(x = social_sharing, y = PokemonGo_AppUsage)) +
geom_point() +
labs(x = "Social Sharing", y = "PokemonGo_AppUsage") +
geom_smooth(method = "lm", se = F)
ggplot(Pok_Grouped, aes(x = social_sharing, y = PhyscialActivity)) +
geom_point() +
labs(x = "Social Sharing", y = "Amount of Physcial Activity") +
geom_smooth(method = "lm", se = F)
ggplot(Pok_Grouped, aes(x = PokemonGo_AppUsage, y = PhyscialActivity)) +
geom_point() +
labs(x = "PokemonGo_AppUsage", y = "Amount of Physcial Activity") +
geom_smooth(method = "lm", se = F)
ggplot(Pok_Grouped, aes(x = social_sharing, y = PokemonGo_AppUsage)) +
geom_point() +
labs(x = "Social Sharing", y = "PokemonGo_AppUsage") +
geom_smooth(method = "lm", se = F)
ggplot(Pok_Grouped, aes(x = social_sharing, y = PhyscialActivity)) +
geom_point() +
labs(x = "Social Sharing", y = "Amount of Physcial Activity") +
geom_smooth(method = "lm", se = F)
ggplot(Pok_Grouped, aes(x = PokemonGo_AppUsage, y = PhyscialActivity)) +
geom_point() +
labs(x = "PokemonGo_AppUsage", y = "Amount of Physcial Activity") +
geom_smooth(method = "lm", se = F)
ggplot(Pok_Grouped, aes(x = social_sharing, y = PokemonGo_AppUsage)) +
geom_point() +
labs(x = "Social Sharing", y = "PokemonGo_AppUsage") +
geom_smooth(method = "lm", se = F)
###Simple linear model###
# full model construction
Pok_Log.Linear <- lm(log(PhyscialActivity) ~ log(age) + log(education) +
log(Gender) + log(Attitude) + log(StepsAttitude) +
log(PokemonGo_AppUsage) + log(social_sharing) +
log(PokemonRelate_Behaviour), data = Pok_Grouped)
# Model observation
summary(Pok_Log.Linear)
Pok_Log.Linear <- lm(log(PhyscialActivity) ~ log(age) + log(education) +
log(Gender) + log(Attitude) + log(StepsAttitude) +
log(PokemonGo_AppUsage) +
log(PokemonRelate_Behaviour), data = Pok_Grouped)
# Model observation
summary(Pok_Log.Linear)
Pok_Log.Linear <- lm(log(PhyscialActivity) ~ log(age) + log(education) +
log(Gender) + log(StepsAttitude) +
log(PokemonGo_AppUsage) +
log(PokemonRelate_Behaviour), data = Pok_Grouped)
# Model observation
summary(Pok_Log.Linear)
Pok_Log.Linear <- lm(log(PhyscialActivity) ~ log(education) +
log(Gender) + log(StepsAttitude) +
log(PokemonGo_AppUsage) +
log(PokemonRelate_Behaviour), data = Pok_Grouped)
# Model observation
summary(Pok_Log.Linear)
Pok.Linear <- lm(PhyscialActivity ~ age + education +
Gender + Attitude + StepsAttitude +
PokemonGo_AppUsage + social_sharing +
PokemonRelate_Behaviour, data = Pok_Grouped)
summary(Pok.Linear)
Pok.Linear <- lm(PhyscialActivity ~ age + education +
Gender + Attitude + StepsAttitude +
PokemonGo_AppUsage +
PokemonRelate_Behaviour, data = Pok_Grouped)
summary(Pok.Linear)
library(caret)
library(randomForest)
Pok.Linear <- randomForest(PhyscialActivity ~ age + education +
Gender + Attitude + StepsAttitude +
PokemonGo_AppUsage +
PokemonRelate_Behaviour, data = Pok_Grouped)
confusionMatrix(Pok.Linear)
Pok.RF <- randomForest(PhyscialActivity ~ age + education +
Gender + Attitude + StepsAttitude +
PokemonGo_AppUsage +
PokemonRelate_Behaviour, data = Pok_Grouped)
confusionMatrix(Pok_Grouped$PhyscialActivity, predict(Pok.RF))
mean(Pok_Grouped$PhyscialActivity == predict(Pok.RF))
Pok.RF
library(e1071)
Pok.svm <- svm(PhyscialActivity ~ ., data = Pok_Grouped, kernel = "linear",
cost = 10, scale = FALSE)
print(Pok.svm)
summary(Pok.svm)
tune.out = tune(svm ,y~.,data=dat ,kernel ="linear",
ranges =list(cost=c(0.001,0.01,0.1, 1,5,10,100)))
tune.out = tune(svm , PhyscialActivity~., data=Pok_Grouped ,kernel ="linear",
ranges =list(cost=c(0.001,0.01,0.1, 1,5,10,100)))
summary(tune.out)
bestmod =tune.out$best.model
bestmod
########################
###Model Constructing###
########################
install.packages("lavaan", dependencies=TRUE)
library(lavaan)
###gam###
library(gam)
###gam###
library(gam)
install.packages("gam")
###gam###
library(gam)
amgam <- gam(PhyscialActivity ~ lo(age) + lo(education) +
lo(Gender) + lo(Attitude) + lo(StepsAttitude) +
lo(PokemonGo_AppUsage) + lo(social_sharing) +
lo(PokemonRelate_Behaviour),
data=Pok_Grouped)
# import library required
library(dplyr)
library(psych)
####################################
###Data Observation and Cleansing###
####################################
# loading dataset
load("pokemon.Rdata")
# observe data
head(pok,3)
# primary observe of data
summary(pok)
# checking number of missing value
sum(is.na(pok))
# checking unreasonable items in age
pok_age_s0 <- pok[pok$age <0,]
pok_age_s0
#@ This dataset is really good, without error or missing value
# However, according to the article, the records where the answer of
# ATTENTION_filter1 is not "Disagree" should be filtered
pok_new <- pok[pok$ATTENTION_filter1=="Disagree",]
pok_new$ATTENTION_filter1 <- NULL
summary(pok_new)
#################################
###Preparation of Grouped data###
#################################
###convert variables into numeric values###
pok_new[,4:30] <- pok_new[,4:30] %>% mutate_if(is.factor,as.numeric)
summary(pok_new)
###Justify the grouping###
# Calculate Cronbach's Alpha
# Attitude
alpha(pok_new[7:12], check.keys=TRUE)
# steps Attitude
alpha(pok_new[13:18], check.keys=TRUE)
# Behaviour
alpha(pok_new[19:24], check.keys=TRUE)
# Pokemon Behviour
alpha(pok_new[27:29], check.keys=TRUE)
#@ Since alpha of behaviour and Pokemon behaviour are "Acceptable"
#@ we group them together
# variable grouping
Attitude <- rowMeans(pok_new[7:12])
StepAttitude <- rowMeans(pok_new[13:18])
Behqviour <- rowMeans(pok_new[19:24])
PokemonBehaviour <- rowMeans(pok_new[27:29])
# create new dataset
Pok_Grouped <- pok_new[c(4:6)]
Pok_Grouped$Attitude <- Attitude
Pok_Grouped$StepsAttitude <- StepAttitude
Pok_Grouped$PhyscialActivity <- Behaviour
Pok_Grouped$PokemonGo_AppUsage <- pok_new$app_usage_PokemonGoApp_pokemonusage1
Pok_Grouped$social_sharing <- pok_new$social_sharing
Pok_Grouped$PokemonRelate_Behaviour <- PokemonBehaviour
head(Pok_Grouped)
summary(Pok_Grouped)
# libraries required
library(ggplot2)
library(GGally)
require(foreign)
require(MASS)
require(Hmisc)
require(reshape2)
# Start plotting
ggpairs(Pok_Grouped)
boxplot(PhyscialActivity~education,
data=Pok_Grouped,
main="Different boxplots for gender",
xlab="Month Number",
ylab="Amount of Physical Activity"
)
boxplot(PhyscialActivity~Gender,
data=Pok_Grouped,
main="Different boxplots for Education Level",
xlab="Education Level",
ylab="Amount of Physical Activity"
)
###linear model###
# full model construction
#Pok_Log.Linear <- lm(log(PhyscialActivity) ~ log(age) + log(education) +
#                             log(Gender) + log(Attitude) + log(StepsAttitude) +
#                             log(PokemonGo_AppUsage) + log(social_sharing) +
#                             log(PokemonRelate_Behaviour), data = Pok_Grouped)
Pok.Linear <- glm(PhyscialActivity ~ ., data = Pok_Grouped)
summary(Pok.Linear)
Pok.Linear <- glm(PhyscialActivity ~ ., data = Pok_Grouped, family=binomial)
Pok.Linear <- glm(PhyscialActivity ~ ., data = Pok_Grouped, family=poisson)
summary(Pok.Poisson)
###linear model###
# full model construction
#Pok_Log.Linear <- lm(log(PhyscialActivity) ~ log(age) + log(education) +
#                             log(Gender) + log(Attitude) + log(StepsAttitude) +
#                             log(PokemonGo_AppUsage) + log(social_sharing) +
#                             log(PokemonRelate_Behaviour), data = Pok_Grouped)
Pok.Linear <- glm(PhyscialActivity ~ ., data = Pok_Grouped)
summary(Pok.Linear)
Pok.Poisson <- glm(PhyscialActivity ~ ., data = Pok_Grouped, family=poisson)
summary(Pok.Poisson)
View(pok)
View(pok)
View(Pok_Grouped)
View(Pok_Grouped)
summary(Pok_Grouped)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
